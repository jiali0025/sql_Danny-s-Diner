CREATE SCHEMA dannys_diner;
SET search_path = dannys_diner;

CREATE TABLE sales (
  "customer_id" VARCHAR(1),
  "order_date" DATE,
  "product_id" INTEGER
);

INSERT INTO sales
  ("customer_id", "order_date", "product_id")
VALUES
  ('A', '2021-01-01', '1'),
  ('A', '2021-01-01', '2'),
  ('A', '2021-01-07', '2'),
  ('A', '2021-01-10', '3'),
  ('A', '2021-01-11', '3'),
  ('A', '2021-01-11', '3'),
  ('B', '2021-01-01', '2'),
  ('B', '2021-01-02', '2'),
  ('B', '2021-01-04', '1'),
  ('B', '2021-01-11', '1'),
  ('B', '2021-01-16', '3'),
  ('B', '2021-02-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-07', '3');
 

CREATE TABLE menu (
  "product_id" INTEGER,
  "product_name" VARCHAR(5),
  "price" INTEGER
);

INSERT INTO menu
  ("product_id", "product_name", "price")
VALUES
  ('1', 'sushi', '10'),
  ('2', 'curry', '15'),
  ('3', 'ramen', '12');
  

CREATE TABLE members (
  "customer_id" VARCHAR(1),
  "join_date" DATE
);

INSERT INTO members
  ("customer_id", "join_date")
VALUES
  ('A', '2021-01-07'),
  ('B', '2021-01-09');

  -- 1 what is the total amount each customer spent at the restaurant?
SELECT s.customer_id,
        SUM(m.price) AS total_amt_spent
FROM menu m
JOIN sales s 
ON m.product_id = s.product_id
GROUP BY s.customer_id;

-- 2 How many days has each customer visited the restaurant?
SELECT customer_id,
        COUNT(DISTINCT order_date) AS visits 
FROM sales
GROUP BY customer_id;

-- 3 What was the first item from the menu purchased by each customer?
SELECT *
FROM (SELECT s.customer_id,
    s.order_date,
    m.product_name,
    DENSE_RANK() OVER (PARTITION BY s.customer_id ORDER BY s.order_date) AS rank_by_date
FROM sales s 
JOIN menu m 
ON s.product_id = m.product_id) AS ranked_date 
WHERE ranked_date.rank_by_date = 1;

-- 4 What is the most purchased item on the menu and how many times was it purchased by all customers?
SELECT m.product_name,
    COUNT(s.product_id) AS times_purchased
FROM sales s 
JOIN menu m 
ON s.product_id = m.product_id
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1;

-- 5 Which item was the most popular for each customer?
SELECT *
FROM (SELECT s.customer_id,
    m.product_name,
    COUNT(s.product_id) AS order_counts,
    DENSE_Rank() OVER (PARTITION BY s.customer_id ORDER BY COUNT(s.product_id) DESC) AS count_rank
FROM sales s 
JOIN menu m 
ON s.product_id = m.product_id 
GROUP BY s.customer_id, m.product_name) AS counts_table 
WHERE counts_table.count_rank = 1;

-- 6 Which item was purchased first by the customer after they became a member?
SELECT * 
FROM (SELECT s.customer_id,
    s.order_date,
    mn.product_name,
    DENSE_RANK() OVER (PARTITION BY s.customer_id ORDER BY s.order_date) AS date_rank
FROM sales s 
JOIN menu mn
ON mn.product_id = s.product_id
JOIN members mb
ON s.customer_id = mb.customer_id 
WHERE order_date >= join_date) AS rt 
WHERE rt.date_rank = 1; 

-- 7 Which item was purchased just before the customer became a member?
SELECT *
FROM (SELECT s.customer_id,
    s.order_date,
    mn.product_name,
    DENSE_RANK() OVER (PARTITION BY s.customer_id ORDER BY s.order_date DESC) AS date_rank
FROM sales s
JOIN menu mn
ON mn.product_id = s.product_id
JOIN members mb
ON s.customer_id = mb.customer_id
WHERE order_date < join_date) AS rt
WHERE rt.date_rank = 1;

-- 8 What is the total items and amount spent for each member before they became a member?
SELECT mb.customer_id,
    COUNT(mn.product_id) AS total_items,
    SUM(mn.price) AS total_amt_spent
FROM sales s 
JOIN menu mn 
ON mn.product_id = s.product_id 
JOIN members mb 
ON s.customer_id = mb.customer_id
WHERE order_date < join_date 
GROUP BY mb.customer_id;

-- 9 If each $1 spent equates to 10 points and sushi has a 2x points multiplier — how many points would each customer have?
SELECT s.customer_id,
    SUM(pt_cte.points) AS total_points
FROM (SELECT *,
    CASE WHEN product_name = 'sushi' THEN price * 20
    ELSE price * 10 END AS points
    FROM menu) pt_cte 
JOIN sales s 
ON s.product_id = pt_cte.product_id
GROUP BY s.customer_id
ORDER BY total_points DESC;

-- 10 In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi — how many points do customer A and B have at the end of January?
SELECT customer_id,
    SUM(points) AS total_points
FROM (SELECT *,
    CASE WHEN order_date BETWEEN join_date AND one_week_later
    THEN price * 20
    ELSE price * 10 END AS points
    FROM (SELECT s.customer_id,
        s.order_date,
        mb.join_date,
        mn.price,
        mb.join_date + INTERVAL '6 days' AS one_week_later
        FROM sales s
        JOIN members mb
        ON s.customer_id = mb.customer_id
        JOIN menu mn 
        ON s.product_id = mn.product_id 
        WHERE s.order_date <= '2021-01-31'::date) AS dt_cte) AS final_table 
GROUP BY customer_id;

-- Bonus questions
SELECT s.customer_id,
    s.order_date,
    mn.product_name,
    mn.price, 
    CASE WHEN s.order_date >= mb.join_date
        THEN 'Y'
        ELSE 'N' END AS member
FROM sales s
LEFT JOIN members mb
ON s.customer_id = mb.customer_id
JOIN menu mn 
ON s.product_id = mn.product_id;

SELECT *,
    CASE WHEN member = 'Y'
        THEN DENSE_RANK() OVER (PARTITION BY customer_id, member ORDER BY order_date)
        ELSE NULL END AS ranking 
FROM (SELECT s.customer_id,
            s.order_date,
            mn.product_name,
            mn.price,
            CASE WHEN s.order_date >= mb.join_date
                THEN 'Y'
                ELSE 'N' END AS member
    FROM sales s
    LEFT JOIN members mb
    ON s.customer_id = mb.customer_id
    JOIN menu mn
    ON s.product_id = mn.product_id) AS join_cte;